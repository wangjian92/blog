"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_utils_1 = require("@vuepress/shared-utils");
const util_1 = require("./util");
const Classifier_1 = require("./interface/Classifier");
function handleOptions(options, ctx) {
    let { directories = [], frontmatters = [], globalPagination = {} } = options;
    directories = directories.filter(directory => {
        const targetDir = shared_utils_1.path.join(ctx.sourceDir, directory.dirname);
        if (shared_utils_1.fs.existsSync(targetDir)) {
            return true;
        }
        shared_utils_1.logger.warn(`[@vuepress/plugin-blog] Invalid directory classifier: ${shared_utils_1.chalk.cyan(directory.id)}, ` +
            `${shared_utils_1.chalk.gray(targetDir)} doesn't exist!`);
        return false;
    });
    const pageEnhancers = [];
    const frontmatterClassificationPages = [];
    const extraPages = [];
    const paginations = [];
    for (const directory of directories) {
        const { id, dirname, path: indexPath = `/${directory.id}/`, layout: indexLayout = 'IndexPost', frontmatter, itemLayout = 'Post', itemPermalink = '/:year/:month/:day/:slug', pagination = {}, } = directory;
        if (!indexPath) {
            continue;
        }
        extraPages.push({
            permalink: indexPath,
            frontmatter: {
                layout: ctx.getLayout(indexLayout),
                title: `${util_1.UpperFirstChar(id)}`,
                ...frontmatter,
            },
            meta: {
                pid: id,
                id,
            },
        });
        pageEnhancers.push({
            when: ({ regularPath }) => Boolean(regularPath) &&
                regularPath !== indexPath &&
                regularPath.startsWith(`/${dirname}/`),
            frontmatter: {
                layout: ctx.getLayout(itemLayout, 'Post'),
                permalink: itemPermalink,
            },
            data: { id, pid: id },
        });
        paginations.push({
            classifierType: Classifier_1.ClassifierTypeEnum.Directory,
            getPaginationPageTitle(index) {
                return `Page ${index + 1} | ${id}`;
            },
            ...util_1.resolvePaginationConfig(Classifier_1.ClassifierTypeEnum.Directory, globalPagination, pagination, indexPath, ctx),
            pid: id,
            id,
        });
    }
    for (const frontmatterPage of frontmatters) {
        const { id, keys, path: indexPath, layout: indexLayout, scopeLayout, frontmatter, pagination = {}, } = frontmatterPage;
        if (!indexPath) {
            continue;
        }
        extraPages.push({
            permalink: indexPath,
            frontmatter: {
                layout: ctx.getLayout(indexLayout, 'FrontmatterKey'),
                title: `${util_1.UpperFirstChar(id)}`,
                ...frontmatter,
            },
            meta: {
                pid: id,
                id,
            },
        });
        const map = {};
        frontmatterClassificationPages.push({
            id,
            pagination,
            keys,
            map,
            scopeLayout,
            _handler: util_1.curryFrontmatterHandler(id, map),
        });
    }
    return {
        pageEnhancers,
        frontmatterClassificationPages,
        extraPages,
        paginations,
    };
}
exports.handleOptions = handleOptions;
